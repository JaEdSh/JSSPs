{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\r\n\r\nmetadata = {\r\n    \"systemName\": \"TravisConnecter\",\r\n    \"displayName\": \"TRAVIS\",\r\n    \"description\": \"A broker to connect to the Travis API\",\r\n    \"configuration\": {\r\n        \"ServiceURL\": {\r\n            displayName: \"TravisConnecter Service URL\",\r\n            type: \"string\",\r\n            value: \"https://api-test.lacity.org/lawa/TravisOnBoard/GetTravisData/\"\r\n        }\r\n    }\r\n};\r\n\r\n\r\nondescribe = async function ({configuration}): Promise<void> {\r\n    postSchema({\r\n        objects: {\r\n            \"Operators\": {\r\n                displayName: \"Operators\",\r\n                description: \"Gets Operator Data\",\r\n                properties: {\r\n                    \"APIKey\": { displayName: \"API Key\", type: \"string\" },\r\n                    \"CompanyName\": { displayName: \"Company Name\", type: \"string\" },\r\n                    \"StartDate\": { displayName: \"Start Date\", type: \"string\" },\r\n                    \"EndDate\": { displayName: \"End Date\", type: \"string\" },\r\n                    \"AccountID\": { displayName: \"Account ID\", type: \"number\" },\r\n                    \"OperatorTypeName\": { displayName: \"Operator Type Name\", type: \"string\" },\r\n                    \"OperatorTypeID\": { displayName: \"Operator Type ID\", type: \"number\" },\r\n                    \"ServiceTypeID\": { displayName: \"Service Type ID\", type: \"number\" },\r\n                    \"OpAuthName\": { displayName: \"Op Auth Name\", type: \"string\" },\r\n                    \"OpAuthID\": { displayName: \"Op Auth ID\", type: \"number\" },\r\n                    \"LegalName\": { displayName: \"Legal Name\", type: \"string\" },\r\n                    \"OperatoringName\": { displayName: \"Operatoring Name\", type: \"string\" },\r\n                    \"Address1\": { displayName: \"Address1\", type: \"string\" },\r\n                    \"Address2\": { displayName: \"Address2\", type: \"string\" },\r\n                    \"City\": { displayName: \"City\", type: \"string\" },\r\n                    \"State\": { displayName: \"State\", type: \"string\" },\r\n                    \"Zip\": { displayName: \"Zip\", type: \"string\" },\r\n                    \"Phone1\": { displayName: \"Phone1\", type: \"string\" },\r\n                    \"EmailAddress\": { displayName: \"Email Address\", type: \"string\" },\r\n                    \"LAXAgreeEndDate\": { displayName: \"LAX Agree End Date\", type: \"string\" },\r\n                    \"OpAuthNumber\": { displayName: \"Op Auth Number\", type: \"string\" },\r\n                    \"LAXAgreeNumber\": { displayName: \"LAX Agree Number\", type: \"string\" },\r\n                    \"SuspendedFlag\": { displayName: \"Suspended Flag\", type: \"boolean\" },\r\n                    \"ContractContactFull\": { displayName: \"Contract Contact Full\", type: \"string\" },\r\n                    \"FinanceContactFull\": { displayName: \"Finance Contact Full\", type: \"string\" },\r\n                    \"PermitContactFull\": { displayName: \"Permit Contact Full\", type: \"string\" },\r\n                    \"VehiclesCount\": { displayName: \"Vehicles Count\", type: \"string\" },\r\n                    \"VehiclesFull\": { displayName: \"Vehicles Full\", type: \"string\" }\r\n                },\r\n                methods: {\r\n                    \"getListByCompanyName\": {\r\n                        displayName: \"GetOperatorsByCompanyName\",\r\n                        type: \"list\",\r\n                        inputs: [\"APIKey\", \"CompanyName\"],\r\n                        requiredInputs: [\"APIKey\", \"CompanyName\"],\r\n                        outputs: [\r\n                            \"AccountID\",\r\n                            \"OperatorTypeName\",\r\n                            \"OperatorTypeID\",\r\n                            \"ServiceTypeID\",\r\n                            \"OpAuthName\",\r\n                            \"OpAuthID\",\r\n                            \"LegalName\",\r\n                            \"OperatoringName\",\r\n                            \"Address1\",\r\n                            \"Address2\",\r\n                            \"City\",\r\n                            \"State\",\r\n                            \"Zip\",\r\n                            \"Phone1\",\r\n                            \"EmailAddress\",\r\n                            \"LAXAgreeEndDate\",\r\n                            \"OpAuthNumber\",\r\n                            \"LAXAgreeNumber\",\r\n                            \"SuspendedFlag\",\r\n                            \"ContractContactFull\",\r\n                            \"FinanceContactFull\",\r\n                            \"PermitContactFull\",\r\n                            \"VehiclesCount\",\r\n                            \"VehiclesFull\"\r\n                        ]\r\n                    },\r\n                    \"getListByDateRange\": {\r\n                        displayName: \"GetOperatorsByDateRange\",\r\n                        type: \"list\",\r\n                        inputs: [\"APIKey\", \"StartDate\", \"EndDate\"],\r\n                        requiredInputs: [\"APIKey\", \"StartDate\", \"EndDate\"],\r\n                        outputs: [\r\n                            \"AccountID\",\r\n                            \"OperatorTypeName\",\r\n                            \"OperatorTypeID\",\r\n                            \"ServiceTypeID\",\r\n                            \"OpAuthName\",\r\n                            \"OpAuthID\",\r\n                            \"LegalName\",\r\n                            \"OperatoringName\",\r\n                            \"Address1\",\r\n                            \"Address2\",\r\n                            \"City\",\r\n                            \"State\",\r\n                            \"Zip\",\r\n                            \"Phone1\",\r\n                            \"EmailAddress\",\r\n                            \"LAXAgreeEndDate\",\r\n                            \"OpAuthNumber\",\r\n                            \"LAXAgreeNumber\",\r\n                            \"SuspendedFlag\",\r\n                            \"ContractContactFull\",\r\n                            \"FinanceContactFull\",\r\n                            \"PermitContactFull\",\r\n                            \"VehiclesCount\",\r\n                            \"VehiclesFull\"\r\n                        ]\r\n                    },\r\n\r\n                    \"getListByLSONumber\": {\r\n                        displayName: \"GetOperatorsByLSO\",\r\n                        type: \"list\",\r\n                        inputs: [\"APIKey\", \"LAXAgreeNumber\"],\r\n                        requiredInputs: [\"APIKey\", \"LAXAgreeNumber\"],\r\n                        outputs: [\r\n                            \"AccountID\",\r\n                            \"OperatorTypeName\",\r\n                            \"OperatorTypeID\",\r\n                            \"ServiceTypeID\",\r\n                            \"OpAuthName\",\r\n                            \"OpAuthID\",\r\n                            \"LegalName\",\r\n                            \"OperatoringName\",\r\n                            \"Address1\",\r\n                            \"Address2\",\r\n                            \"City\",\r\n                            \"State\",\r\n                            \"Zip\",\r\n                            \"Phone1\",\r\n                            \"EmailAddress\",\r\n                            \"LAXAgreeEndDate\",\r\n                            \"OpAuthNumber\",\r\n                            \"LAXAgreeNumber\",\r\n                            \"SuspendedFlag\",\r\n                            \"ContractContactFull\",\r\n                            \"FinanceContactFull\",\r\n                            \"PermitContactFull\",\r\n                            \"VehiclesCount\",\r\n                            \"VehiclesFull\"\r\n                        ]\r\n                    }\r\n                }\r\n            },\r\n            \"Contacts\": {\r\n                displayName: \"Contacts\",\r\n                description: \"Operator contact information\",\r\n                properties: {\r\n                    \"ContactJSON\": { displayName: \"ContactJSON\", type: \"string\" },\r\n                    \"AccountId\": { displayName: \"AccountId\", type: \"string\" },\r\n                    \"ContactId\": { displayName: \"ContactId\", type: \"string\" },\r\n                    \"FirstName\": { displayName: \"FirstName\", type: \"string\" },\r\n                    \"LastName\": { displayName: \"LastName\", type: \"string\" },\r\n                    \"Address1\": { displayName: \"Address1\", type: \"string\" },\r\n                    \"City\": { displayName: \"City\", type: \"string\" },\r\n                    \"State\": { displayName: \"State\", type: \"string\" },\r\n                    \"Zip\": { displayName: \"Zip\", type: \"string\" },\r\n                    \"Phone\": { displayName: \"Phone\", type: \"string\" },\r\n                    \"Email\": { displayName: \"Email\", type: \"string\" }\r\n                },\r\n                methods: {\r\n                    \"deserializeContact\": {\r\n                        displayName: \"DeserializeContact\",\r\n                        type: \"list\",\r\n                        inputs: [\"ContactJSON\"],\r\n                        requiredInputs: [\"ContactJSON\"],\r\n                        outputs: [\r\n                            \"AccountId\",\r\n                            \"ContactId\",\r\n                            \"FirstName\",\r\n                            \"LastName\",\r\n                            \"Address1\",\r\n                            \"City\",\r\n                            \"State\",\r\n                            \"Zip\",\r\n                            \"Phone\",\r\n                            \"Email\"\r\n                        ]\r\n                    }\r\n                }\r\n            },\r\n            \"Vehicles\": {\r\n                displayName: \"Vehicles\",\r\n                description: \"Operator vehicle information\",\r\n                properties: {\r\n                    \"VehicleJSON\": { displayName: \"VehicleJSON\", type: \"string\" },\r\n                    \"AccountId\": { displayName: \"AccountId\", type: \"string\" },\r\n                    \"VehicleId\": { displayName: \"VehicleId\", type: \"string\" },\r\n                    \"FleetNumber\": { displayName: \"FleetNumber\", type: \"number\" },\r\n                    \"Year\": { displayName: \"Year\", type: \"number\" },\r\n                    \"Make\": { displayName: \"Make\", type: \"string\" },\r\n                    \"Model\": { displayName: \"Model\", type: \"string\" },\r\n                    \"Color\": { displayName: \"Color\", type: \"string\" },\r\n                    \"VIN\": { displayName: \"VIN\", type: \"string\" },\r\n                    \"PassengerCapacity\": { displayName: \"PassengerCapacity\", type: \"number\" },\r\n                    \"FuelTypeID\": { displayName: \"FuelTypeID\", type: \"number\" },\r\n                    \"FuelTypeName\": { displayName: \"FuelTypeName\", type: \"string\" },\r\n                    \"LicensePlate\": { displayName: \"LicensePlate\", type: \"string\" },\r\n                    \"Weight\": { displayName: \"Weight\", type: \"number\" },\r\n                    \"Transponder\": { displayName: \"Transponder\", type: \"string\" },\r\n                    \"DecalNumber\": { displayName: \"DecalNumber\", type: \"string\" }\r\n                },\r\n                methods: {\r\n                    \"deserializeVehicles\": {\r\n                        displayName: \"DeserializeVehicles\",\r\n                        type: \"list\",\r\n                        inputs: [\"VehicleJSON\"],\r\n                        requiredInputs: [\"VehicleJSON\"],\r\n                        outputs: [\r\n                            \"AccountId\",\r\n                            \"VehicleId\",\r\n                            \"FleetNumber\",\r\n                            \"Year\",\r\n                            \"Make\",\r\n                            \"Model\",\r\n                            \"Color\",\r\n                            \"VIN\",\r\n                            \"PassengerCapacity\",\r\n                            \"FuelTypeID\",\r\n                            \"FuelTypeName\",\r\n                            \"LicensePlate\",\r\n                            \"Weight\",\r\n                            \"Transponder\",\r\n                            \"DecalNumber\"\r\n                        ]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    )\r\n};\r\n\r\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\r\n    switch (objectName) {\r\n        case \"Operators\": await onexecuteOperators(methodName, parameters, properties, configuration); break;\r\n        case \"Contacts\": await onexecuteContacts(methodName, parameters, properties, configuration); break;\r\n        case \"Vehicles\": await onexecuteVehicles(methodName, parameters, properties, configuration); break;\r\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nasync function onexecuteOperators(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    switch (methodName) {\r\n        case \"getListByCompanyName\": await onexecuteOperatorsGetListByCompanyName(parameters, properties, configuration); break;\r\n        case \"getListByDateRange\": await onexecuteOperatorsGetListByDateRange(parameters, properties, configuration); break; \r\n        case \"getListByLSONumber\": await onexecuteOperatorsGetListByLSONumber(parameters, properties, configuration); break; \r\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nasync function onexecuteContacts(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    switch (methodName) {\r\n        case \"deserializeContact\": await onexecuteContactDeserializeContact(parameters, properties, configuration); break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nasync function onexecuteVehicles(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    switch (methodName) {\r\n        case \"deserializeVehicles\": await onexecuteVehiclesDeserializeVehicles(parameters, properties, configuration); break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nfunction onexecuteOperatorsGetListByCompanyName(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        var urlValue = configuration[\"ServiceURL\"] + 'Companies/';\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.onreadystatechange = function () {\r\n            try {\r\n                if (xhr.readyState !== 4) return;\r\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\r\n\r\n                //console.log(xhr.responseText);\r\n                var obj = JSON.parse(xhr.responseText);\r\n                let objData = [];\r\n                objData = (obj[0].TravisData.map(x => {\r\n                    return {\r\n                        \"AccountID\": x.AccountID,\r\n                        \"OperatorTypeName\": x.OperatorTypeName,\r\n                        \"OperatorTypeID\": x.OperatorTypeID,\r\n                        \"ServiceTypeID\": x.ServiceTypeID,\r\n                        \"OpAuthName\": x.OpAuthName,\r\n                        \"OpAuthID\": x.OpAuthID,\r\n                        \"LegalName\": x.LegalName,\r\n                        \"OperatoringName\": x.OperatingName,\r\n                        \"Address1\": x.Address1,\r\n                        \"Address2\": x.Address2,\r\n                        \"City\": x.City,\r\n                        \"State\": x.State,\r\n                        \"Zip\": x.Zip,\r\n                        \"Phone1\": x.Phone1,\r\n                        \"EmailAddress\": x.EmailAddress,\r\n                        \"LAXAgreeEndDate\": x.LAXAgreeEndDate,\r\n                        \"OpAuthNumber\": x.OpAuthNumber,\r\n                        \"LAXAgreeNumber\": x.LAXAgreeNumber,\r\n                        \"SuspendedFlag\": x.SuspendedFlag,\r\n                        \"ContractContactFull\": JSON.stringify(x.ContractContact),\r\n                        \"FinanceContactFull\": JSON.stringify(x.FinanceContact),\r\n                        \"PermitContactFull\": JSON.stringify(x.PermitContact),\r\n                        \"VehiclesCount\": x.Vehicles?.length,\r\n                        \"VehiclesFull\": JSON.stringify(x.Vehicles)\r\n                    }\r\n                }));\r\n                postResult(objData);\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n            \r\n        }\r\n        if (typeof properties[\"APIKey\"] !== \"string\") throw new Error(\"properties[\\\"APIKey\\\"] is not of type string\");\r\n        if (typeof properties[\"CompanyName\"] !== \"string\") throw new Error(\"properties[\\\"CompanyName\\\"] is not of type string\");\r\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"CompanyName\"]) + \"?apikey=\" + encodeURIComponent(properties[\"APIKey\"]));\r\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        xhr.send();\r\n    });\r\n\r\n}\r\n\r\nfunction onexecuteOperatorsGetListByDateRange(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        var urlValue = configuration[\"ServiceURL\"] + 'PermitDates/'; \r\n        var xhr = new XMLHttpRequest();\r\n        xhr.onreadystatechange = function () {\r\n            try {\r\n                if (xhr.readyState !== 4) return;\r\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\r\n\r\n                //console.log(xhr.responseText);\r\n                var obj = JSON.parse(xhr.responseText);\r\n                let objData = [];\r\n                objData = (obj[0].TravisData.map(x => {\r\n                    return {\r\n                        \"AccountID\": x.AccountID,\r\n                        \"OperatorTypeName\": x.OperatorTypeName,\r\n                        \"OperatorTypeID\": x.OperatorTypeID,\r\n                        \"ServiceTypeID\": x.ServiceTypeID,\r\n                        \"OpAuthName\": x.OpAuthName,\r\n                        \"OpAuthID\": x.OpAuthID,\r\n                        \"LegalName\": x.LegalName,\r\n                        \"OperatoringName\": x.OperatingName,\r\n                        \"Address1\": x.Address1,\r\n                        \"Address2\": x.Address2,\r\n                        \"City\": x.City,\r\n                        \"State\": x.State,\r\n                        \"Zip\": x.Zip,\r\n                        \"Phone1\": x.Phone1,\r\n                        \"EmailAddress\": x.EmailAddress,\r\n                        \"LAXAgreeEndDate\": x.LAXAgreeEndDate,\r\n                        \"OpAuthNumber\": x.OpAuthNumber,\r\n                        \"LAXAgreeNumber\": x.LAXAgreeNumber,\r\n                        \"SuspendedFlag\": x.SuspendedFlag,\r\n                        \"ContractContactFull\": JSON.stringify(x.ContractContact),\r\n                        \"FinanceContactFull\": JSON.stringify(x.FinanceContact),\r\n                        \"PermitContactFull\": JSON.stringify(x.PermitContact),\r\n                        \"VehiclesCount\": x.Vehicles?.length,\r\n                        \"VehiclesFull\": JSON.stringify(x.Vehicles)\r\n                    }\r\n                }));\r\n                postResult(objData);\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n\r\n        }\r\n        if (typeof properties[\"APIKey\"] !== \"string\") throw new Error(\"properties[\\\"APIKey\\\"] is not of type string\");\r\n        if (typeof properties[\"StartDate\"] !== \"string\") throw new Error(\"properties[\\\"StartDate\\\"] is not of type string\");\r\n        if (typeof properties[\"EndDate\"] !== \"string\") throw new Error(\"properties[\\\"EndDate\\\"] is not of type string\");\r\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"StartDate\"]) + '/' + encodeURIComponent(properties[\"EndDate\"]) + \"?apikey=\" + encodeURIComponent(properties[\"APIKey\"]));\r\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        xhr.send();\r\n    });\r\n\r\n}\r\n\r\nfunction onexecuteOperatorsGetListByLSONumber(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        var urlValue = configuration[\"ServiceURL\"] + 'lan/';\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.onreadystatechange = function () {\r\n            try {\r\n                if (xhr.readyState !== 4) return;\r\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\r\n\r\n                //console.log(xhr.responseText);\r\n                var obj = JSON.parse(xhr.responseText);\r\n                let objData = [];\r\n                objData = (obj[0].TravisData.map(x => {\r\n                    return {\r\n                        \"AccountID\": x.AccountID,\r\n                        \"OperatorTypeName\": x.OperatorTypeName,\r\n                        \"OperatorTypeID\": x.OperatorTypeID,\r\n                        \"ServiceTypeID\": x.ServiceTypeID,\r\n                        \"OpAuthName\": x.OpAuthName,\r\n                        \"OpAuthID\": x.OpAuthID,\r\n                        \"LegalName\": x.LegalName,\r\n                        \"OperatoringName\": x.OperatingName,\r\n                        \"Address1\": x.Address1,\r\n                        \"Address2\": x.Address2,\r\n                        \"City\": x.City,\r\n                        \"State\": x.State,\r\n                        \"Zip\": x.Zip,\r\n                        \"Phone1\": x.Phone1,\r\n                        \"EmailAddress\": x.EmailAddress,\r\n                        \"LAXAgreeEndDate\": x.LAXAgreeEndDate,\r\n                        \"OpAuthNumber\": x.OpAuthNumber,\r\n                        \"LAXAgreeNumber\": x.LAXAgreeNumber,\r\n                        \"SuspendedFlag\": x.SuspendedFlag,\r\n                        \"ContractContactFull\": JSON.stringify(x.ContractContact),\r\n                        \"FinanceContactFull\": JSON.stringify(x.FinanceContact),\r\n                        \"PermitContactFull\": JSON.stringify(x.PermitContact),\r\n                        \"VehiclesCount\": x.Vehicles?.length,\r\n                        \"VehiclesFull\": JSON.stringify(x.Vehicles)\r\n                    }\r\n                }));\r\n                postResult(objData);\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n\r\n        }\r\n        if (typeof properties[\"LAXAgreeNumber\"] !== \"string\") throw new Error(\"properties[\\\"LAXAgreeNumber\\\"] is not of type string\");\r\n        if (typeof properties[\"APIKey\"] !== \"string\") throw new Error(\"properties[\\\"APIKey\\\"] is not of type string\");\r\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"LAXAgreeNumber\"]) + \"?apikey=\" + encodeURIComponent(properties[\"APIKey\"]));\r\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n        xhr.send();\r\n    });\r\n\r\n}\r\n\r\nfunction onexecuteContactDeserializeContact(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n\r\n        if (typeof properties[\"ContactJSON\"] !== \"string\") throw new Error(\"properties[\\\"ContactJSON\\\"] is not of type string\");\r\n        var obj = JSON.parse(properties[\"ContactJSON\"]);\r\n        let objData = [];\r\n        objData = (obj.map(x => {\r\n            return {\r\n                \"AccountID\": x.AccountId,\r\n                \"ContactId\": x.ContactId,\r\n                \"FirstName\": x.FirstName,\r\n                \"LastName\": x.LastName,\r\n                \"Address1\": x.Address1,\r\n                \"City\": x.City,\r\n                \"State\": x.State,\r\n                \"Zip\": x.Zip,                \r\n                \"Phone\": x.Phone,\r\n                \"Email\": x.Email\r\n            }\r\n        }));\r\n        postResult(objData);\r\n        resolve();        \r\n    });\r\n}\r\n\r\nfunction onexecuteVehiclesDeserializeVehicles(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n\r\n        if (typeof properties[\"VehicleJSON\"] !== \"string\") throw new Error(\"properties[\\\"VehicleJSON\\\"] is not of type string\");\r\n        var obj = JSON.parse(properties[\"VehicleJSON\"]);\r\n        let objData = [];\r\n        objData = (obj.map(x => {\r\n            return {\r\n                \"AccountID\": x.AccountId,\r\n                \"VehicleId\": x.VehicleId,\r\n                \"FleetNumber\": x.FleetNumber,\r\n                \"Year\": x.Year,\r\n                \"Make\": x.Make,\r\n                \"Model\": x.Model,\r\n                \"Color\": x.Color,\r\n                \"VIN\": x.VIN,\r\n                \"PassengerCapacity\": x.PassengerCapacity,\r\n                \"FuelTypeID\": x.FuelTypeID,\r\n                \"FuelTypeName\": x.FuelTypeName,\r\n                \"LicensePlate\": x.LicensePlate,\r\n                \"Weight\": x.Weight,\r\n                \"Transponder\": x.Transponder,\r\n                \"DecalNumber\": x.DecalNumber\r\n            }\r\n        }));\r\n        postResult(objData);\r\n        resolve();\r\n    });\r\n}"],"names":["metadata","systemName","displayName","description","configuration","ServiceURL","type","value","ondescribe","async","postSchema","objects","Operators","properties","APIKey","CompanyName","StartDate","EndDate","AccountID","OperatorTypeName","OperatorTypeID","ServiceTypeID","OpAuthName","OpAuthID","LegalName","OperatoringName","Address1","Address2","City","State","Zip","Phone1","EmailAddress","LAXAgreeEndDate","OpAuthNumber","LAXAgreeNumber","SuspendedFlag","ContractContactFull","FinanceContactFull","PermitContactFull","VehiclesCount","VehiclesFull","methods","getListByCompanyName","inputs","requiredInputs","outputs","getListByDateRange","getListByLSONumber","Contacts","ContactJSON","AccountId","ContactId","FirstName","LastName","Phone","Email","deserializeContact","Vehicles","VehicleJSON","VehicleId","FleetNumber","Year","Make","Model","Color","VIN","PassengerCapacity","FuelTypeID","FuelTypeName","LicensePlate","Weight","Transponder","DecalNumber","deserializeVehicles","onexecute","objectName","methodName","parameters","Promise","resolve","reject","urlValue","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","objData","TravisData","map","x","_x$Vehicles","OperatingName","stringify","ContractContact","FinanceContact","PermitContact","length","postResult","e","open","encodeURIComponent","setRequestHeader","send","onexecuteOperatorsGetListByCompanyName","_x$Vehicles2","onexecuteOperatorsGetListByDateRange","_x$Vehicles3","onexecuteOperatorsGetListByLSONumber","onexecuteOperators","onexecuteContactDeserializeContact","onexecuteContacts","onexecuteVehiclesDeserializeVehicles","onexecuteVehicles"],"mappings":"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"}